///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V6.10.1.50424 for Atmel AVR       30/Apr/2014  21:07:38 /
// Copyright 1996-2011 IAR Systems AB.                                        /
//                                                                            /
//    Source file  =  D:\WORKSPACE\IAR\PowerUnit\sound.c                      /
//    Command line =  D:\WORKSPACE\IAR\PowerUnit\sound.c --cpu=m16 -mt -o     /
//                    D:\WORKSPACE\IAR\PowerUnit\Debug\Obj\ -lb               /
//                    D:\WORKSPACE\IAR\PowerUnit\Debug\List\                  /
//                    --initializers_in_flash --debug                         /
//                    -DENABLE_BIT_DEFINITIONS -e --eeprom_size 512 --clib    /
//                    -Oh                                                     /
//    List file    =  D:\WORKSPACE\IAR\PowerUnit\Debug\List\sound.s90         /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME sound

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?F2SL_L04
        EXTERN ?F_MUL_L04
        EXTERN ?UL2F_L04
        EXTERN ?need_segment_init

        PUBWEAK `?<Segment init: TINY_Z>`
        PUBLIC Alarm
        PUBLIC Beep
        PUBLIC DispChange
        PUBLIC Off
        PUBLIC On
        PUBLIC OverProtect
        PUBLIC OverProtect2
        PUBLIC OverTemp
        PUBLIC RetCounter
        PUBLIC RetFlag
        PUBLIC Sound
        PUBLIC SoundProcessing
        PUBLIC TurnOn
        PUBWEAK _A_DDRB
        PUBWEAK _A_OCR0
        PUBWEAK _A_TCCR0
        PUBWEAK _A_TCNT0
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBLIC beepCounter
        PUBLIC beepFlag
        PUBLIC melodyFlag
        PUBLIC melodyList
        PUBLIC melodyStep
        PUBLIC pSong


        ASEGN ABSOLUTE:DATA:NOROOT,05cH
// union <unnamed> volatile __io _A_OCR0
_A_OCR0:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,053H
// union <unnamed> volatile __io _A_TCCR0
_A_TCCR0:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,052H
// union <unnamed> volatile __io _A_TCNT0
_A_TCNT0:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,037H
// union <unnamed> volatile __io _A_DDRB
_A_DDRB:
        DS8 1

        RSEG NEAR_F:CODE:NOROOT(0)
On:
        DC16 20, 100, 14, 100, 0, 0

        RSEG NEAR_F:CODE:NOROOT(0)
Off:
        DC16 14, 100, 20, 100, 0, 0

        RSEG NEAR_F:CODE:NOROOT(0)
Alarm:
        DC16 10, 1000, 0, 0

        RSEG NEAR_F:CODE:NOROOT(0)
OverTemp:
        DC16 20, 300, 21, 300, 0, 0

        RSEG NEAR_F:CODE:NOROOT(0)
TurnOn:
        DC16 20, 100, 19, 100, 18, 100, 0, 0

        RSEG NEAR_F:CODE:NOROOT(0)
OverProtect:
        DC16 17, 300, 0, 300, 17, 300, 0, 300, 17, 300, 0, 300, 17, 300, 0, 0

        RSEG NEAR_F:CODE:NOROOT(0)
DispChange:
        DC16 25, 150, 0, 100, 25, 150, 0, 0

        RSEG NEAR_F:CODE:NOROOT(0)
OverProtect2:
        DC16 17, 200, 0, 200, 17, 200, 0, 200, 17, 200, 0, 200, 17, 200, 0, 200
        DC16 13, 200, 0, 0

        RSEG TINY_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: TINY_Z>`
beepCounter:
        DS8 2
pSong:
        DS8 2
beepFlag:
        DS8 1
melodyFlag:
        DS8 1
melodyStep:
        DS8 1

        RSEG NEAR_F:CODE:NOROOT(0)
melodyList:
        DC16 On, Off, Alarm, OverTemp, TurnOn, OverProtect, DispChange
        DC16 OverProtect2

        RSEG CODE:CODE:NOROOT(1)
Beep:
        ST      -Y, R24
        IN      R24, 0x3F
        CLI
        MOV     R20, R16
        MOVW    R17:R16, R19:R18
        OR      R18, R19
        BRNE    ??Beep_0
        LDI     R16, 40
        OUT     0x33, R16
        CBI     0x17, 0x03
        LDI     R16, 0
        STS     (beepCounter + 4), R16
        LDI     R30, beepCounter
        LDI     R31, 0
        ST      Z, R16
        STD     Z+1, R16
        RJMP    ??Beep_1
??Beep_0:
        LDS     R18, (beepCounter + 4)
        TST     R18
        BRNE    ??Beep_1
        SBI     0x17, 0x03
        LDI     R18, 0
        OUT     0x32, R18
        LDI     R18, 1
        STS     (beepCounter + 4), R18
        TST     R20
        BRNE    ??Beep_2
        LDI     R18, 40
        OUT     0x33, R18
        CBI     0x17, 0x03
        RJMP    ??Beep_3
??Beep_2:
        OUT     0x3C, R20
        LDI     R18, 28
        OUT     0x33, R18
??Beep_3:
        LDI     R18, 0
        LDI     R19, 0
        CALL    ?UL2F_L04
        LDI     R20, 246
        LDI     R21, 40
        LDI     R22, 156
        LDI     R23, 62
        CALL    ?F_MUL_L04
        CALL    ?F2SL_L04
        LDI     R30, beepCounter
        LDI     R31, 0
        ST      Z, R16
        STD     Z+1, R17
??Beep_1:
        OUT     0x3F, R24
        LD      R24, Y+
        RET
        REQUIRE _A_TCCR0
        REQUIRE _A_DDRB
        REQUIRE _A_TCNT0
        REQUIRE _A_OCR0

        RSEG CODE:CODE:NOROOT(1)
SoundProcessing:
        ST      -Y, R27
        ST      -Y, R26
        ST      -Y, R24
        IN      R24, 0x3F
        CLI
        LDS     R16, (beepCounter + 4)
        CPI     R16, 2
        BRNE    ??SoundProcessing_0
        LDS     R16, (beepCounter + 5)
        CPI     R16, 1
        BRNE    ??SoundProcessing_1
        LDI     R27, 0
        LDI     R26, ((beepCounter + 2) & 0xff) & 0xFF
        LD      R30, X+
        LD      R31, X
        LDS     R16, (beepCounter + 6)
        LDI     R17, 4
        MUL     R16, R17
        ADD     R30, R0
        ADC     R31, R1
        ADIW    R31:R30, 2
        LPM     R16, Z+
        LPM     R17, Z
        SBIW    R31:R30, 1
        OR      R16, R17
        LDI     R16, 0
        BRNE    ??SoundProcessing_2
        STS     (beepCounter + 5), R16
        STS     (beepCounter + 6), R16
        STS     (beepCounter + 4), R16
        LDI     R18, 0
        LDI     R19, 0
        RJMP    ??SoundProcessing_3
??SoundProcessing_2:
        STS     (beepCounter + 4), R16
        LPM     R18, Z+
        LPM     R19, Z
        SBIW    R31:R30, 3
        LPM     R16, Z+
        RCALL   Beep
        LDI     R30, (beepCounter & 0xff) & 0xFF
        LDI     R31, 0
        LDD     R16, Z+6
        INC     R16
        STD     Z+6, R16
        RJMP    ??SoundProcessing_0
??SoundProcessing_1:
        LDI     R18, 0
        LDI     R19, 0
        LDI     R16, 0
??SoundProcessing_3:
        RCALL   Beep
??SoundProcessing_0:
        OUT     0x3F, R24
        LD      R24, Y+
        LD      R26, Y+
        LD      R27, Y+
        RET

        RSEG CODE:CODE:NOROOT(1)
Sound:
        ST      -Y, R24
        IN      R24, 0x3F
        CLI
        LDI     R17, 2
        MUL     R16, R17
        MOVW    R31:R30, R1:R0
        SUBI    R30, LOW((-(melodyList) & 0xFFFF))
        SBCI    R31, (-(melodyList) & 0xFFFF) >> 8
        LPM     R16, Z+
        LPM     R17, Z
        STS     (beepCounter + 2), R16
        STS     (beepCounter + 3), R17
        LDI     R16, 0
        STS     (beepCounter + 6), R16
        LDI     R16, 1
        STS     (beepCounter + 5), R16
        LDI     R16, 2
        STS     (beepCounter + 4), R16
        RCALL   SoundProcessing
        OUT     0x3F, R24
        LD      R24, Y+
        RET

        RSEG CODE:CODE:NOROOT(1)
RetFlag:
        LDI     R16, LOW((beepCounter + 4))
        RET

        RSEG CODE:CODE:NOROOT(1)
RetCounter:
        LDI     R16, beepCounter
        RET

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: TINY_Z>`:
        DC16    SFE(TINY_Z) - SFB(TINY_Z)
        DC16    SFB(TINY_Z)
        DC16    0
        REQUIRE ?need_segment_init

        END
// 
//   4 bytes in segment ABSOLUTE
// 296 bytes in segment CODE
//   6 bytes in segment INITTAB
// 164 bytes in segment NEAR_F
//   7 bytes in segment TINY_Z
// 
// 460 bytes of CODE memory (+ 6 bytes shared)
//   7 bytes of DATA memory (+ 4 bytes shared)
//
//Errors: none
//Warnings: none
